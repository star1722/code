Merge Sort :
#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;
// Merge function to merge two sorted subarrays
void merge(vector<int>& arr, int low, int mid, int high) {
 int n1 = mid - low + 1;
 int n2 = high - mid;
 // Create temporary arrays
 vector<int> L(n1), R(n2);
 // Copy data to temporary arrays L[] and R[]
 for (int i = 0; i < n1; i++)
 L[i] = arr[low + i];
 for (int j = 0; j < n2; j++)
 R[j] = arr[mid + 1 + j];
 // Merge the temporary arrays back into arr[low..high]
 int i = 0, j = 0, k = low;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 } else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 // Copy the remaining elements of L[], if any
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 // Copy the remaining elements of R[], if any
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
}
// Merge sort function
void mergeSort(vector<int>& arr, int low, int high) {
 if (low < high) {
 int mid = low + (high - low) / 2;
 // Parallelize the sorting of two halves
 #pragma omp parallel sections
 {
 #pragma omp section
 mergeSort(arr, low, mid);
 #pragma omp section
 mergeSort(arr, mid + 1, high);
 }
 // Merge the sorted halves
 merge(arr, low, mid, high);
 }
}
// Parallel merge sort function
void parallelMergeSort(vector<int>& arr) {
 mergeSort(arr, 0, arr.size() - 1);
}
int main() {
 // Example array
 vector<int> arr = {64, 34, 25, 12, 22, 11, 90};
 cout << "Original array: ";
 for (int num : arr) {
 cout << num << " ";
 }
 cout << endl;
 // Perform parallel merge sort
 parallelMergeSort(arr);
 cout << "Sorted array: ";
 for (int num : arr) {
 cout << num << " ";
 }
 cout << endl;
 return 0;
}
Ouput: Original array: 64 34 25 12 22 11 90 
Sorted array: 11 12 22 25 34 64 90
